import java.util.Scanner;

public class BST_Practice {
    static class node{
        int data;
        node left,right;
        node(int data){
            this.data = data;
        }
    }
    static Scanner sc = new Scanner(System.in);
    public static node createTree(){
        System.out.println("Enter Data: ");
        int data = sc.nextInt();

        if(data == -1) return null;
        node newNode = new node(data);

        System.out.println("Enter left for "+data);
        newNode.left = createTree();
        System.out.println("Enter right for "+data);
        newNode.right = createTree();
        return newNode;
    }

    public static void InOrder(node newNode){
        if(newNode == null){
            return;
        }
        InOrder(newNode.left);
        System.out.print(newNode.data+" ");
        InOrder(newNode.right);
    }
    public static void PreOrder(node newNode){
        if(newNode == null){
            return;
        }
        System.out.print(newNode.data+" ");
        PreOrder(newNode.left);
        PreOrder(newNode.right);
    }
    public static void PostOrder(node newNode){
        if(newNode == null){
            return;
        }
        PostOrder(newNode.left);
        PostOrder(newNode.right);
        System.out.print(newNode.data+" ");
    }
     public static node Insertion(node root){
         System.out.println("Enter the node data you want to insert into Binary Search Tree: ");
         int key = sc.nextInt();
         return InsertNode(root, key);
     }
     public static node InsertNode(node root, int key){
        if(root == null){
            return new node(key);
        }
        if(key<root.data){
            root.left = InsertNode(root.left,key);
        }else if(key>root.data){
            root.right = InsertNode(root.right,key);
        }
        return root;
     }

     //
     public static void Search(node root){
         System.out.println("Enter the Element you want to search in the BST: ");
         int ele = sc.nextInt();
         boolean found = searchNode(root,ele);
         if(found){
             System.out.println("Element has been found");
         }else{
             System.out.println("Element does not exist");
         }

     }

    public static boolean searchNode(node root, int ele){
        if(root == null){
            return false;
        }
        if(root.data == ele){
            return true;
        }
        boolean foundInLeft = searchNode(root.left,ele);
        if(foundInLeft){
            return true;
        }
        return searchNode(root.right,ele);
    }
    public static int Minimum(node root){
        int mValue = root.data;
        while(root.left!=null){
            mValue = root.left.data;
            root = root.left;
        }
        return mValue;
    }
    public static node deleteNode(node root){
        System.out.println("Enter the element you want to delete: ");
        int ele = sc.nextInt();
        return deleteAcc(root, ele);
    }
    public static node deleteAcc(node root, int ele){
        if(root == null){
            return root;
        }

        if(ele<root.data){
            root.left = deleteAcc(root.left, ele);
        }else if(ele>root.data){
            root.right = deleteAcc(root.right, ele);
        }else{
            if(root.left == null){
                return root.right;
            }else if(root.right==null){
                return root.left;
            }

            root.data = Minimum(root.right);

            root.right = deleteAcc(root.right, root.data);
        }
        return root;
    }

    //
    public static void main(String[] args) {
        System.out.println("Creating a Binary Search Tree => ");
        node root = createTree();
        System.out.println("The Inorder of given Binary Search Tree is: ");
        InOrder(root);
        System.out.println();
        System.out.println("The Preorder of given Binary Search Tree is: ");
        PreOrder(root);
        System.out.println();
        System.out.println("The Postorder of given Binary Search Tree is: ");
        PostOrder(root);
        System.out.println();
        Insertion(root);
        System.out.println("The Inorder of given Binary Search Tree is: ");
        InOrder(root);
        System.out.println();
        Search(root);
        System.out.println();
        deleteNode(root);
        InOrder(root);
    }
}


//////////////////////////////////////////////////////////////////////////////

Froneted code 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>BST Web Interface</title>
  <!-- Animate.css CDN -->
  <link rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 40px;
      background: #f0f4fc;
      text-align: center;
    }
    input {
      font-size: 1em;
      padding: 0.5em;
      width: 120px;
      border: 2px solid #ddd;
      border-radius: 5px;
      transition: border-color 0.3s;
    }
    input:focus {
      border-color: #4096ff;
      outline: none;
    }
    button {
      font-size: 1em;
      margin: 10px;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      background: #4096ff;
      color: white;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      transition: transform 0.2s ease, box-shadow 0.2s;
    }
    button:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    button:active {
      transform: scale(0.97);
    }
    /* Ripple effect */
    button .ripple {
      position: absolute;
      border-radius: 50%;
      transform: scale(0);
      background: rgba(255, 255, 255, 0.6);
      width: 100px;
      height: 100px;
      pointer-events: none;
      opacity: 0;
      animation: ripple 0.6s linear;
    }
    @keyframes ripple {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }
    #output {
      margin-top: 30px;
      min-height: 2em;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h2 class="animate__animated animate__fadeInDown">Binary Search Tree Interface</h2>

  <input type="number" id="data" placeholder="Enter number" />

  <button onclick="insert()">Insert</button>
  <button onclick="search()">Search</button>
  <button onclick="deleteNode()">Delete</button>
  <button onclick="inorder()">InOrder</button>

  <div id="output" class="animate__animated"></div>

  <script>
    const baseURL = "http://localhost:8080";
    function addRipple(e) {
      const btn = e.currentTarget;
      const circle = document.createElement("span");
      const d = Math.max(btn.clientWidth, btn.clientHeight);
      circle.style.width = circle.style.height = d + "px";
      circle.style.left = e.clientX - btn.offsetLeft - d/2 + "px";
      circle.style.top = e.clientY - btn.offsetTop - d/2 + "px";
      circle.classList.add("ripple");
      btn.appendChild(circle);
      circle.addEventListener("animationend", () => circle.remove());
    }
    document.querySelectorAll("button").forEach(btn =>
      btn.addEventListener("click", addRipple)
    );

    async function insert() {
      const val = document.getElementById('data').value;
      const res = await fetch(`${baseURL}/insert?data=${val}`, { method: "POST" });
      const text = await res.text();
      showOutput(text);
    }

    async function search() {
      const val = document.getElementById('data').value;
      const res = await fetch(`${baseURL}/search?data=${val}`);
      const found = await res.text();
      showOutput(found === 'true' ? "üî• Found!" : "‚ùå Not Found.");
    }

    async function deleteNode() {
      const val = document.getElementById('data').value;
      const res = await fetch(`${baseURL}/delete?data=${val}`, { method: "DELETE" });
      const text = await res.text();
      showOutput(text);
    }

    async function inorder() {
      const res = await fetch(`${baseURL}/inorder`);
      const data = await res.json();
      showOutput("InOrder: " + data.join(", "));
    }

    function showOutput(msg) {
      const out = document.getElementById('output');
      out.textContent = msg;
      out.classList.remove("animate__fadeIn");
      void out.offsetWidth;  // reset animation
      out.classList.add("animate__fadeIn");
    }
  </script>
</body>
</html>

