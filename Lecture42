package queues;

//class MyQueue{
//    final int size = 10;
//    int arr[] = new int[size];
//    int front = -1;
//    int rear = -1;
//
//    boolean isEmpty()
//    {
//        return (front==-1 && rear==-1);
//    }
//
//    int peek()
//    {
//        if(this.isEmpty())
//        {
//            System.out.println("Empty Queue !! Nothing at front");
//            return -1; //Error code
//        }
//        return arr[front];
//    }
//
//    void enqueue(int data)
//    {
////        rear = rear + 1;
////        arr[rear] = data;
//       arr[++rear] = data;
//    }
//
//    int dequeue()
//    {
//        if(this.isEmpty())
//        {
//            System.out.println("Empty Queue!! Nothing to dequeue.");
//            return -1;
//        }
//        if(front == rear) //Deleting the only one element in the queue
//        {
//            int x = arr[front];
//            front = -1;
//            rear = -1;
//            return x;
//        }
//        return arr[front++];
//    }
//}
//
//public class ArrayImp {
//    public static void main(String[] args){
//        MyQueue q = new MyQueue();
//        System.out.println(q.isEmpty());
//        System.out.println(q.peek());
//        System.out.println(q.dequeue());
//        q.enqueue(7);
//        System.out.println(q.isEmpty());
//        System.out.println(q.peek());
//        System.out.println(q.dequeue());
//        System.out.println(q.isEmpty());
//        q.enqueue(8);
//        q.enqueue(9);
//        q.enqueue(10);
//        System.out.println(q.peek());
//    }
//}

class CircularQueue{
final int size = 10;
    int arr[] = new int[size];
    int front = -1;
    int rear = -1;

    boolean isEmpty()
    {
        return (front==-1 && rear==-1);
    }

    int peek()
    {
        if(this.isEmpty())
        {
            System.out.println("Empty Queue !! Nothing at front");
            return -1; //Error code
        }
        return arr[front];
    }

    void enqueue(int data)
    {
        if(this.isEmpty())
        {
            front++;
        }
        if(front == (rear+1)%size)
        {
            System.out.println("Queue is Full Cannot Enqueue");
            return;
        }
        rear = (rear + 1)%size;
        arr[rear] = data;
    }

    int dequeue()
    {
        if(this.isEmpty())
        {
            System.out.println("Empty Queue!! Nothing to dequeue.");
            return -1;
        }
        if(front == rear) //Deleting the only one element in the queue
        {
            int x = arr[front];
            front = -1;
            rear = -1;
            return x;
        }
        int x = arr[front];
        front = (front+1)%size;
        return x;
    }
}

public class ArrayImp {
    public static void main(String[] args){
        CircularQueue q = new CircularQueue();
//        System.out.println(q.isEmpty());
//        System.out.println(q.peek());
//        System.out.println(q.dequeue());
//        q.enqueue(7);
//        System.out.println(q.isEmpty());
//        System.out.println(q.peek());
//        System.out.println(q.dequeue());
//        System.out.println(q.isEmpty());
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        q.enqueue(4);
        q.enqueue(5);
        q.enqueue(6);
        q.enqueue(7);
        q.enqueue(8);
        q.enqueue(9);
        q.enqueue(10);
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        q.enqueue(11); //cannot enqueue but only 7 element are there out of 10. -> memory wastage
    }
}
