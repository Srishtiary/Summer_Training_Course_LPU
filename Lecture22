package strings;
public class StringStudy {
    public static void main(String[] args){
        String name = "CipherSchools";//created using string literals - stored in method area
        String name2 = "CipherSchools";

        String name3 = new String("CipherSchools");//creating string using constructors
        String name4 = new String("CipherSchools");

        System.out.println(name==name2);//==operator compares references for objects and values for primitive data type
        System.out.println(name3==name4);
        System.out.println(name==name3);

//      STRINGS ARE IMMUTABLE
//      Everytime we do an operation on a string, a new object is created

        System.out.println("========================");
        System.out.println("1.CONCATENATION");
        //1.Concatenation
        String s1 = "Hello";
        s1 = s1 + "Peeps";
        System.out.println(s1 + "How're you doing");
        System.out.println(s1);//s1 remains same because

//      Another way to concat is to use function
        String s2 = new String("Hello");
        String s3 = new String("People");
//        s2.concat(s3);
        String s4 = s2.concat(s3);
        System.out.println(s4);
        System.out.println(s2);

        System.out.println("==================");
        System.out.println("2. CHECKING IF STRING ARE EQUAL IN VALUE");
        //2.CHECKING IF STRINGS ARE EQUAL IN VALUE

        System.out.println(name.equals(name2));
        System.out.println(name.equals(name3));
        //Equals function -> Object class.
        //This generally compares references(hashcodes) of object (just like ==)
        //But, for String class it has been overridden to check for content equality

        System.out.println("=================================");
        System.out.println("3)Creating new object from character array");

        //3)Creating new String object from character array
        char arr[] = {'C','I','H','E','R'};
        String strFromArr = new String(arr);//constructor overload
        System.out.println(strFromArr);


    }
}
